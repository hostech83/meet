{"version":3,"file":"static/js/504.02f9daab.chunk.js","mappings":"qNAYA,MAqGA,EArGuBA,IAAuC,IAAtC,cAAEC,EAAa,cAAEC,GAAeF,EACtD,MAAOG,EAAYC,IAAiBC,EAAAA,EAAAA,UAAS,OACtCC,EAAUC,IAAeF,EAAAA,EAAAA,WAAS,IAEzCG,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAgBA,KACpBF,EAAYG,OAAOC,YAAc,IAAI,EAMvC,OAHAF,IACAC,OAAOE,iBAAiB,SAAUH,GAE3B,IAAMC,OAAOG,oBAAoB,SAAUJ,EAAc,GAC/D,IAsCH,OACEK,EAAAA,EAAAA,KAACC,EAAAA,EAAG,CAACC,UAAU,mDAAkDC,UAC/DH,EAAAA,EAAAA,KAACI,EAAAA,EAAG,CAACC,GAAG,OAAMF,UACZG,EAAAA,EAAAA,MAACC,EAAAA,EAAU,CACTC,GAAG,mBACH,cAAY,mBACZN,UAAU,wBAAuBC,SAAA,EAEjCH,EAAAA,EAAAA,KAACS,EAAAA,EAAKC,MAAK,CAACC,QAAQ,mBAAmBT,UAAU,iBAAgBC,SAAC,uBAGlEH,EAAAA,EAAAA,KAACS,EAAAA,EAAKG,QAAO,CACXJ,GAAG,mBACHK,KAAK,OACLX,UAAU,+CACVY,MAAO,CAAEC,MAAO,OAAQC,UAAW,UACnC,aAAW,mBACX,cAAY,yBACZC,MAAO5B,EACP6B,SAvDkBC,IAC1B,MAAMF,EAAQE,EAAMC,OAAOH,MAC3B3B,EAAc2B,GAEd,MAAMI,EAAcC,OAAOL,GAEvBM,MAAMF,KAAiBC,OAAOE,UAAUH,GAC1CjC,EAAc,0DACLiC,GAAe,EACxBjC,EAAc,4DACLiC,EAAc,IACvBjC,EACE,oEAGFA,EAAc,IACdD,EAAckC,GAChB,EAuCQI,QAAUC,GAAMA,EAAEN,OAAOO,SACzBC,QAAUF,GAAMA,EAAEN,OAAOO,SACzBE,YAAY,4BAEd7B,EAAAA,EAAAA,KAAC8B,EAAAA,EAAc,CACbC,UAAU,MACVC,MAAO,CAAEC,KAAM,GAAIC,KAAM,KACzBC,QAtCYC,IACpBpC,EAAAA,EAAAA,KAACqC,EAAAA,EAAO,CACN7B,GAAG,mBACC4B,EACJlC,UAAU,mBACV,cAAY,mBAAkBC,SAC/B,gCAiCO8B,OAAMzC,QAAkB8C,EACxBpC,UAAU,eAAcC,UAExBH,EAAAA,EAAAA,KAAA,KACEE,UAAU,oCACVuB,QAlDQc,KAClBjD,EAAc,MACdH,EAAcmC,OAAO,OACrBlC,EAAc,GAAG,EAgDPoD,KAAK,MACL,aAAW,yBACX,WAAS,yBACT1B,MAAO,CACL2B,SAAU,SACVC,MAAO,iBACPC,OAAQ,qBAMd,C","sources":["components/NumberOfEvents.js"],"sourcesContent":["// src/components/NumberOfEvents.js\r\nimport { useState, useEffect } from \"react\";\r\nimport {\r\n  Form,\r\n  InputGroup,\r\n  Col,\r\n  Row,\r\n  OverlayTrigger,\r\n  Tooltip,\r\n} from \"react-bootstrap\";\r\nimport \"bootstrap-icons/font/bootstrap-icons.css\";\r\n\r\nconst NumberOfEvents = ({ setCurrentNOE, setErrorAlert }) => {\r\n  const [inputValue, setInputValue] = useState(\"32\");\r\n  const [isMobile, setIsMobile] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const checkIfMobile = () => {\r\n      setIsMobile(window.innerWidth <= 768);\r\n    };\r\n\r\n    checkIfMobile();\r\n    window.addEventListener(\"resize\", checkIfMobile);\r\n\r\n    return () => window.removeEventListener(\"resize\", checkIfMobile);\r\n  }, []);\r\n\r\n  const handleInputChanged = (event) => {\r\n    const value = event.target.value;\r\n    setInputValue(value);\r\n\r\n    const numberValue = Number(value);\r\n\r\n    if (isNaN(numberValue) || !Number.isInteger(numberValue)) {\r\n      setErrorAlert(\"Please enter a valid integer for the number of events.\");\r\n    } else if (numberValue <= 0) {\r\n      setErrorAlert(\"Please enter a positive number for the number of events.\");\r\n    } else if (numberValue > 250) {\r\n      setErrorAlert(\r\n        \"Maximum number of events is 250. Please enter a smaller number.\"\r\n      );\r\n    } else {\r\n      setErrorAlert(\"\");\r\n      setCurrentNOE(numberValue);\r\n    }\r\n  };\r\n  const handleClear = () => {\r\n    setInputValue(\"32\");\r\n    setCurrentNOE(Number(\"32\"));\r\n    setErrorAlert(\"\");\r\n  };\r\n\r\n  const resetTooltip = (props) => (\r\n    <Tooltip\r\n      id=\"reset-tooltip\"\r\n      {...props}\r\n      className=\"bordered-tooltip\"\r\n      data-testid=\"bordered-tooltip\"\r\n    >\r\n      Reset to default value (32)\r\n    </Tooltip>\r\n  );\r\n\r\n  return (\r\n    <Row className=\" align-items-center justify-content-center w-100\">\r\n      <Col xs=\"auto\">\r\n        <InputGroup\r\n          id=\"number-of-events\"\r\n          data-testid=\"number-of-events\"\r\n          className=\"co align-items-center\"\r\n        >\r\n          <Form.Label htmlFor=\"number-of-events\" className=\"labelNOE me-2 \">\r\n            Number of Events:\r\n          </Form.Label>\r\n          <Form.Control\r\n            id=\"number-of-events\"\r\n            type=\"text\"\r\n            className=\"number-of-events number-of-events-input me-2\"\r\n            style={{ width: \"70px\", textAlign: \"center\" }}\r\n            aria-label=\"Number of Events\"\r\n            data-testid=\"number-of-events-input\"\r\n            value={inputValue}\r\n            onChange={handleInputChanged}\r\n            onClick={(e) => e.target.select()}\r\n            onFocus={(e) => e.target.select()}\r\n            placeholder=\"Enter number of events\"\r\n          />\r\n          <OverlayTrigger\r\n            placement=\"top\"\r\n            delay={{ show: 50, hide: 400 }}\r\n            overlay={resetTooltip}\r\n            show={isMobile ? true : undefined}\r\n            className=\"resetTooltip\"\r\n          >\r\n            <i\r\n              className=\"bi bi-arrow-clockwise buttonReset\"\r\n              onClick={handleClear}\r\n              role=\"img\"\r\n              aria-label=\"Reset number of events\"\r\n              alt-text=\"Reset number of events\"\r\n              style={{\r\n                fontSize: \"1.5rem\",\r\n                color: \"cornflowerblue\",\r\n                cursor: \"pointer\",\r\n              }}\r\n            />\r\n          </OverlayTrigger>\r\n        </InputGroup>\r\n      </Col>\r\n    </Row>\r\n  );\r\n};\r\n\r\nexport default NumberOfEvents;\r\n"],"names":["_ref","setCurrentNOE","setErrorAlert","inputValue","setInputValue","useState","isMobile","setIsMobile","useEffect","checkIfMobile","window","innerWidth","addEventListener","removeEventListener","_jsx","Row","className","children","Col","xs","_jsxs","InputGroup","id","Form","Label","htmlFor","Control","type","style","width","textAlign","value","onChange","event","target","numberValue","Number","isNaN","isInteger","onClick","e","select","onFocus","placeholder","OverlayTrigger","placement","delay","show","hide","overlay","props","Tooltip","undefined","handleClear","role","fontSize","color","cursor"],"sourceRoot":""}